{"version":3,"sources":["Clock.js","App.js","serviceWorker.js","index.js"],"names":["initialState","init","running","pause","breakLength","sessionLength","timer","breakTimer","minutes","seconds","session","break","intervalHandle","breakIntervalHandle","Clock","props","clock","state","breakInc","setState","breakSecondsRemaining","secondsRemaining","breakDec","sessionInc","min","Math","floor","sec","sessionDec","reset","clearInterval","console","log","audio","currentTime","tick","bind","startCountDown","this","document","getElementById","play","setInterval","Card","CardContent","Typography","className","component","variant","color","id","IconButton","aria-label","onClick","src","type","Component","App","style","width","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afde7140.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\n\r\nconst TIME = 100;\r\n\r\nconst initialState = {\r\n    init: true,\r\n    running: false,\r\n    pause: false,\r\n    breakLength: 5,\r\n    sessionLength: 25,\r\n    timer: 1500,\r\n    breakTimer: 300,\r\n    minutes: 25,\r\n    seconds: 0,\r\n    session: true,\r\n    break: false,\r\n}\r\n\r\nlet intervalHandle = '';\r\nlet breakIntervalHandle = '';\r\n\r\nclass Clock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = initialState;\r\n        this.tick = this.tick.bind(this)\r\n        this.startCountDown = this.startCountDown.bind(this)\r\n        this.break = this.break.bind(this)\r\n        this.audio = null;\r\n\r\n    }\r\n\r\n    secondsRemaining;\r\n    breakSecondsRemaining;\r\n\r\n    componentDidMount() {\r\n        this.audio = document.getElementById('beep');\r\n    }\r\n\r\n\r\n    clock = () => {\r\n        if (this.state.session) {\r\n            // let minutes = Math.floor(this.state.timer / 60);\r\n            // let seconds = this.state.timer - minutes * 60;\r\n            let seconds = this.state.seconds < 10 ? '0' + this.state.seconds : this.state.seconds;\r\n            let minutes = this.state.minutes < 10 ? '0' + this.state.minutes : this.state.minutes;\r\n            return minutes + ':' + seconds;\r\n        } else {\r\n            // let minutes = Math.floor(this.state.breakTimer / 60);\r\n            // let seconds = this.state.breakTimer - minutes * 60;\r\n            let seconds = this.state.seconds < 10 ? '0' + this.state.seconds : this.state.seconds;\r\n            let minutes = this.state.minutes < 10 ? '0' + this.state.minutes : this.state.minutes;\r\n            return minutes + ':' + seconds;\r\n        }\r\n    }\r\n\r\n    /*      shouldComponentUpdate(nextProps, nextState) {\r\n            if (!this.state.pause && this.state.running) {\r\n                if (this.state.session) {\r\n                    return this.state.timer !== nextState.timer;\r\n                } else {\r\n                    return this.state.breakTimer !== nextState.breakTimer;\r\n                }\r\n            } else {\r\n                return true;\r\n            }\r\n        }  */\r\n\r\n    breakInc = () => {\r\n        if (this.state.breakLength < 60 && !this.state.running) {\r\n            this.setState(state => ({ ...state, breakLength: state.breakLength + 1 }), () => {\r\n                this.breakSecondsRemaining = this.state.breakLength * 60;\r\n                this.secondsRemaining = this.state.sessionLength * 60;\r\n                this.setState(state => ({ ...state, breakTimer: this.breakSecondsRemaining }))\r\n            })\r\n        }\r\n    }\r\n    breakDec = () => {\r\n        if (this.state.breakLength > 1 && !this.state.running) {\r\n            this.setState(state => ({ ...state, breakLength: state.breakLength - 1 }), () => {\r\n                this.breakSecondsRemaining = this.state.breakLength * 60;\r\n                this.secondsRemaining = this.state.sessionLength * 60;\r\n                this.setState(state => ({ ...state, breakTimer: this.breakSecondsRemaining }))\r\n            })\r\n        }\r\n    }\r\n\r\n    sessionInc = () => {\r\n        if (this.state.sessionLength < 60 && !this.state.running) {\r\n            this.setState(state => ({ ...state, sessionLength: state.sessionLength + 1 }), () => {\r\n                this.breakSecondsRemaining = this.state.breakLength * 60;\r\n                this.secondsRemaining = this.state.sessionLength * 60;\r\n                var min = Math.floor(this.secondsRemaining / 60);\r\n                var sec = this.secondsRemaining - (min * 60);\r\n                this.setState(state => ({ ...state, minutes: min, seconds: sec, timer: this.secondsRemaining }))\r\n            })\r\n        }\r\n    }\r\n    sessionDec = () => {\r\n        if (this.state.sessionLength > 1 && !this.state.running) {\r\n            this.setState(state => ({ ...state, sessionLength: state.sessionLength - 1 }), () => {\r\n                this.breakSecondsRemaining = this.state.breakLength * 60;\r\n                this.secondsRemaining = this.state.sessionLength * 60;\r\n                var min = Math.floor(this.secondsRemaining / 60);\r\n                var sec = this.secondsRemaining - (min * 60);\r\n                this.setState(state => ({ ...state, minutes: min, seconds: sec, timer: this.secondsRemaining }))\r\n            })\r\n        }\r\n    }\r\n\r\n    tick() {\r\n        var min = Math.floor(this.secondsRemaining / 60);\r\n        var sec = this.secondsRemaining - (min * 60);\r\n        this.secondsRemaining--\r\n        this.setState(state => ({\r\n            ...state,\r\n            minutes: min,\r\n            seconds: sec,\r\n            timer: this.secondsRemaining,\r\n            session: true,\r\n            break: false\r\n        }), () => {\r\n            if (min === 0 & sec === 0) {\r\n                this.audio.play();\r\n                clearInterval(intervalHandle);\r\n                this.breakSecondsRemaining = this.state.breakLength * 60;\r\n                breakIntervalHandle = setInterval(this.break, TIME);\r\n            }\r\n        })\r\n        console.log('Session' + this.clock() + this.state.session)\r\n    }\r\n\r\n    break() {\r\n        var min = Math.floor(this.breakSecondsRemaining / 60);\r\n        var sec = this.breakSecondsRemaining - (min * 60);\r\n        this.breakSecondsRemaining--\r\n        this.setState(state => ({\r\n            ...state,\r\n            minutes: min,\r\n            seconds: sec,\r\n            breakTimer: this.breakSecondsRemaining,\r\n            session: false,\r\n            break: true\r\n        }), () => {\r\n            if (min === 0 & sec === 0) {\r\n                this.audio.play()\r\n                clearInterval(breakIntervalHandle);\r\n                this.secondsRemaining = this.state.sessionLength * 60;\r\n                intervalHandle = setInterval(this.tick, TIME);\r\n            }\r\n            console.log('Break' + this.clock() + this.state.break)\r\n        })\r\n    }\r\n\r\n    startCountDown() {\r\n        console.log('PLAY')\r\n        console.log(this.state)\r\n        if (this.state.running) {\r\n            console.log('PAUSE')\r\n            console.log(this.clock())\r\n            clearInterval(intervalHandle);\r\n            clearInterval(breakIntervalHandle);\r\n            this.setState(state => ({ ...state, running: false, pause: true }))\r\n        } else {\r\n            if (this.state.init) {\r\n                console.log('START SESSION')\r\n                this.setState(state => ({ ...state, running: true, session: true, break: false, init: false }), () => {\r\n                    this.secondsRemaining = (this.state.sessionLength * 60);\r\n                    intervalHandle = setInterval(this.tick, TIME);\r\n                })\r\n            } else {\r\n                if (this.state.session && this.state.pause) {\r\n                    console.log('RESUME SESSION')\r\n                    console.log(this.clock())\r\n                    this.setState(state => ({ ...state, running: true, pause: false }), () => {\r\n                        intervalHandle = setInterval(this.tick, TIME);\r\n                    })\r\n                }\r\n                if (this.state.break && this.state.pause) {\r\n                    console.log('RESUME BREAK')\r\n                    console.log(this.clock())\r\n                    this.setState(state => ({ ...state, running: true, pause: false }), () => {\r\n                        breakIntervalHandle = setInterval(this.break, TIME);\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*     startCountDown() {\r\n            console.log('PLAY')\r\n            console.log(this.state)\r\n            if (this.state.running) {\r\n                console.log('PAUSE')\r\n                console.log(this.clock())\r\n                clearInterval(intervalHandle);\r\n                clearInterval(breakIntervalHandle);\r\n                this.setState(state => ({ ...state, running: false, pause: true }))\r\n            } else {\r\n                if (this.state.init) {\r\n                    console.log('START SESSION')\r\n                    this.setState(state => ({ ...state, running: true, session: true, break: false, init: false }), () => {\r\n                        this.secondsRemaining = (this.state.sessionLength * 60) - 1;\r\n                        intervalHandle = setInterval(this.tick, TIME);\r\n                    })\r\n                } else {\r\n                    if (this.state.session && this.state.pause) {\r\n                        console.log('RESUME SESSION')\r\n                        console.log(this.clock())\r\n                        this.setState(state => ({ ...state, running: true, pause: false }), () => {\r\n                            intervalHandle = setInterval(this.tick, TIME);\r\n                        })\r\n                    }\r\n                    if (this.state.break && this.state.pause) {\r\n                        console.log('RESUME BREAK')\r\n                        console.log(this.clock())\r\n                        this.setState(state => ({ ...state, running: true, pause: false }), () => {\r\n                            breakIntervalHandle = setInterval(this.break, TIME);\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        } */\r\n\r\n\r\n    reset = () => {\r\n        this.setState(() => ({ ...initialState, init: true }), () => {\r\n            clearInterval(intervalHandle);\r\n            clearInterval(breakIntervalHandle);\r\n            console.log('RESET')\r\n        });\r\n        this.audio.pause();\r\n        this.audio.currentTime = 0;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Card >\r\n                    <div>\r\n                        <CardContent >\r\n                            <Typography className=\"font-weight-bold\" component=\"h5\" variant=\"h5\">\r\n                                POMODORO CLOCK\r\n                            </Typography>\r\n\r\n                            <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                                <div id=\"timer-label\">\r\n                                    {this.state.session ? 'Session' : 'Break'}\r\n\r\n                                </div>\r\n                                <div id=\"time-left\" className=\"\">{this.clock()}</div>\r\n                            </Typography>\r\n                        </CardContent>\r\n\r\n                        <div >\r\n                            <IconButton aria-label=\"previous\">\r\n                                <PauseIcon />\r\n                            </IconButton>\r\n                            <IconButton id=\"start_stop\" onClick={this.startCountDown} aria-label=\"play/pause\">\r\n                                <PlayArrowIcon />\r\n                            </IconButton>\r\n                            <IconButton id=\"reset\" onClick={this.reset} aria-label=\"next\">\r\n                                <RefreshIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                </Card>\r\n                <div className=\"w-50 m-auto\">\r\n                    <div id=\"break-label\" className=\"d-flex justify-content-between\">\r\n                        <IconButton onClick={this.breakInc} id=\"break-increment\"><ExpandLessIcon /></IconButton>\r\n                        Break Length\r\n                        <IconButton onClick={this.breakDec} id=\"break-decrement\"><ExpandMoreIcon /></IconButton>\r\n                    </div>\r\n                    <div id=\"break-length\" className=\" font-weight-bold h6\">\r\n                        {this.state.breakLength}\r\n                    </div>\r\n                    <div id=\"session-label\" className=\"d-flex justify-content-between\">\r\n                        <IconButton onClick={this.sessionInc} id=\"session-increment\"><ExpandLessIcon /></IconButton>\r\n                        Session Length\r\n                        <IconButton onClick={this.sessionDec} id=\"session-decrement\"><ExpandMoreIcon /></IconButton>\r\n                    </div>\r\n                    <div id=\"session-length\" className=\"font-weight-bold h6\">\r\n                        {this.state.sessionLength}\r\n                    </div>\r\n                </div>\r\n                <audio id=\"beep\"> <source src=\"http://soundbible.com/grab.php?id=2210&type=mp3\" type=\"audio/ogg\" /> </audio>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Clock;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Clock from './Clock';\n\nfunction App() {\n  return (\n    <div className=\"App d-flex flex-column m-auto\" style={{width: '30%'}}>\n      <Clock />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}